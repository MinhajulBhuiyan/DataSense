'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';

interface ExampleQuery {
  id: number;
  title: string;
  description: string;
  query: string;
  category: string;
  icon: string;
}

interface Category {
  value: string;
  label: string;
  icon: React.ReactNode;
  color: string;
}

export default function ExampleQueries() {
  const [theme, setTheme] = useState<'light' | 'dark'>('light');
  const [mounted, setMounted] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [copiedId, setCopiedId] = useState<number | null>(null);

  // Initialize theme
  useEffect(() => {
    setMounted(true);
    const savedTheme = window.localStorage.getItem('datasense-theme') as 'light' | 'dark' | null;
    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    const initialTheme = savedTheme || (systemPrefersDark ? 'dark' : 'light');
    
    setTheme(initialTheme);
    
    if (initialTheme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, []);

  const toggleTheme = () => {
    const newTheme = theme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
    
    if (newTheme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
    
    window.localStorage.setItem('datasense-theme', newTheme);
  };

  const exampleQueries: ExampleQuery[] = [
    // Distributors
    {
      id: 1,
      title: "Show all distributors",
      description: "Get a complete list of all distributors in the system with contact details",
      query: "Show all distributors",
      category: "distributors",
      icon: "users"
    },
    {
      id: 2,
      title: "Top performing distributors",
      description: "Find distributors with the highest total sales this year",
      query: "Show me the top 10 distributors by total revenue",
      category: "distributors",
      icon: "users"
    },
    {
      id: 3,
      title: "Distributors by region",
      description: "List all distributors grouped by their geographical region",
      query: "Show all distributors grouped by region",
      category: "distributors",
      icon: "users"
    },
    
    // Inventory
    {
      id: 4,
      title: "Current inventory status",
      description: "Display all products with their current stock levels",
      query: "List all products with their current stock",
      category: "inventory",
      icon: "package"
    },
    {
      id: 5,
      title: "Low stock alert",
      description: "Identify products that are running low and need restocking",
      query: "Find products with low stock levels",
      category: "inventory",
      icon: "package"
    },
    {
      id: 6,
      title: "Out of stock items",
      description: "Show all products that are currently out of stock",
      query: "Show all out of stock products",
      category: "inventory",
      icon: "package"
    },
    {
      id: 7,
      title: "Inventory value",
      description: "Calculate the total value of current inventory",
      query: "What is the total value of our current inventory?",
      category: "inventory",
      icon: "package"
    },
    
    // Orders
    {
      id: 8,
      title: "Recent orders",
      description: "View all orders placed in the current month",
      query: "Show recent orders from this month",
      category: "orders",
      icon: "shopping"
    },
    {
      id: 9,
      title: "Pending orders",
      description: "List all orders that are pending processing or delivery",
      query: "Show all pending orders",
      category: "orders",
      icon: "shopping"
    },
    {
      id: 10,
      title: "Large orders",
      description: "Find orders with total value exceeding a certain amount",
      query: "Show me all orders with total value greater than 10000",
      category: "orders",
      icon: "shopping"
    },
    {
      id: 11,
      title: "Orders by distributor",
      description: "View order history for a specific distributor",
      query: "Show all orders from the last 30 days",
      category: "orders",
      icon: "shopping"
    },
    
    // Revenue
    {
      id: 12,
      title: "Total revenue by distributor",
      description: "Calculate total revenue generated by each distributor",
      query: "Calculate total revenue by distributor",
      category: "revenue",
      icon: "chart"
    },
    {
      id: 13,
      title: "Monthly revenue trend",
      description: "Show revenue breakdown by month for this year",
      query: "Show monthly revenue for this year",
      category: "revenue",
      icon: "chart"
    },
    {
      id: 14,
      title: "Product revenue analysis",
      description: "Find which products are generating the most revenue",
      query: "What are the top 10 products by revenue?",
      category: "revenue",
      icon: "chart"
    },
    {
      id: 15,
      title: "Year-over-year comparison",
      description: "Compare revenue between this year and last year",
      query: "Compare total revenue this year vs last year",
      category: "revenue",
      icon: "chart"
    },
    
    // Returns
    {
      id: 16,
      title: "Pending returns",
      description: "Display all return requests that are awaiting approval",
      query: "Show pending returns",
      category: "returns",
      icon: "return"
    },
    {
      id: 17,
      title: "Returns this month",
      description: "View all product returns processed this month",
      query: "Show all returns from this month",
      category: "returns",
      icon: "return"
    },
    {
      id: 18,
      title: "Most returned products",
      description: "Identify products with the highest return rate",
      query: "Which products have the most returns?",
      category: "returns",
      icon: "return"
    },
    
    // Analytics
    {
      id: 19,
      title: "Sales performance",
      description: "Get an overview of sales metrics and key performance indicators",
      query: "Show me overall sales performance metrics",
      category: "analytics",
      icon: "analytics"
    },
    {
      id: 20,
      title: "Customer insights",
      description: "Analyze customer ordering patterns and preferences",
      query: "Show distributor ordering patterns",
      category: "analytics",
      icon: "analytics"
    },
    {
      id: 21,
      title: "Product performance",
      description: "Analyze which products are performing best",
      query: "Show product performance analysis",
      category: "analytics",
      icon: "analytics"
    }
  ];

  const categories: Category[] = [
    { 
      value: 'all', 
      label: 'All',
      color: '#08834d',
      icon: (
        <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
        </svg>
      )
    },
    { 
      value: 'distributors', 
      label: 'Distributors',
      color: '#08834d',
      icon: (
        <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
        </svg>
      )
    },
    { 
      value: 'inventory', 
      label: 'Inventory',
      color: '#08834d',
      icon: (
        <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
        </svg>
      )
    },
    { 
      value: 'orders', 
      label: 'Orders',
      color: '#08834d',
      icon: (
        <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
        </svg>
      )
    },
    { 
      value: 'revenue', 
      label: 'Revenue',
      color: '#08834d',
      icon: (
        <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
        </svg>
      )
    },
    { 
      value: 'returns', 
      label: 'Returns',
      color: '#08834d',
      icon: (
        <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6" />
        </svg>
      )
    },
    { 
      value: 'analytics', 
      label: 'Analytics',
      color: '#08834d',
      icon: (
        <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z" />
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.488 9H15V3.512A9.025 9.025 0 0120.488 9z" />
        </svg>
      )
    }
  ];

  const filteredQueries = selectedCategory === 'all' 
    ? exampleQueries 
    : exampleQueries.filter(q => q.category === selectedCategory);

  const copyToClipboard = (query: string, id: number) => {
    navigator.clipboard.writeText(query);
    setCopiedId(id);
    setTimeout(() => setCopiedId(null), 2000);
  };

  const useQuery = (query: string) => {
    // Store the query in localStorage to be picked up by the main page
    localStorage.setItem('selected-query', query);
    // Navigate back to main page
    window.location.href = '/';
  };

  const getCategoryIcon = (category: string) => {
    const icons: Record<string, React.ReactNode> = {
      distributors: (
        <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
        </svg>
      ),
      inventory: (
        <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
        </svg>
      ),
      orders: (
        <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
        </svg>
      ),
      revenue: (
        <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
        </svg>
      ),
      returns: (
        <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6" />
        </svg>
      ),
      analytics: (
        <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z" />
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.488 9H15V3.512A9.025 9.025 0 0120.488 9z" />
        </svg>
      )
    };
    return icons[category] || icons.distributors;
  };

  if (!mounted) {
    return null;
  }

  return (
    <div className="min-h-screen bg-gray-100 dark:bg-gray-900 transition-colors duration-200">
      {/* Header - Compact */}
      <header className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 sticky top-0 z-10 shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-14">
            <div className="flex items-center gap-3">
              <Link href="/" className="flex items-center gap-2 px-2 py-1.5 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors group">
                <svg className="w-4 h-4 text-gray-600 dark:text-gray-400 group-hover:text-green-600 dark:group-hover:text-green-400 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
                <span className="text-sm font-medium text-gray-700 dark:text-gray-300 group-hover:text-green-600 dark:group-hover:text-green-400 transition-colors">Back</span>
              </Link>
              <div className="h-4 w-px bg-gray-300 dark:bg-gray-600" />
              <h1 className="text-base font-semibold text-gray-900 dark:text-white">
                Example Queries
              </h1>
            </div>

            <button
              onClick={toggleTheme}
              className="p-2 rounded-lg bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
              aria-label={`Switch to ${theme === 'light' ? 'dark' : 'light'} mode`}
            >
              {theme === 'light' ? (
                <svg className="w-4 h-4 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
                </svg>
              ) : (
                <svg className="w-4 h-4 text-yellow-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
                </svg>
              )}
            </button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        {/* Category Filter - Compact */}
        <div className="mb-6">
          <div className="flex flex-wrap gap-2 justify-center">
            {categories.map((category) => (
              <button
                key={category.value}
                onClick={() => setSelectedCategory(category.value)}
                className={`flex items-center gap-1.5 px-3 py-1.5 rounded-lg text-sm font-medium transition-all duration-200 ${
                  selectedCategory === category.value
                    ? 'text-white shadow-md'
                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600 hover:border-green-400 dark:hover:border-green-500 hover:shadow-sm'
                }`}
                style={selectedCategory === category.value ? { backgroundColor: category.color } : {}}
              >
                {category.icon}
                <span>{category.label}</span>
              </button>
            ))}
          </div>
        </div>

        {/* Query Grid */}
        <div className="grid gap-5 md:grid-cols-2 lg:grid-cols-3">
          {filteredQueries.map((query) => (
            <div
              key={query.id}
              className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-5 hover:shadow-xl dark:hover:shadow-2xl dark:hover:shadow-black/30 transition-all duration-200 group hover:border-green-300 dark:hover:border-green-600"
            >
              <div className="flex items-start gap-3 mb-3">
                <div className="w-10 h-10 rounded-lg flex items-center justify-center flex-shrink-0 group-hover:scale-110 transition-transform duration-200"
                  style={{ 
                    backgroundColor: theme === 'light' ? 'rgba(8, 131, 77, 0.1)' : 'rgba(8, 131, 77, 0.2)'
                  }}>
                  <div style={{ color: '#08834d' }}>
                    {getCategoryIcon(query.category)}
                  </div>
                </div>
                <div className="flex-1 min-w-0">
                  <h3 className="text-base font-semibold text-gray-900 dark:text-white mb-1 line-clamp-2">
                    {query.title}
                  </h3>
                  <p className="text-xs text-gray-500 dark:text-gray-400 line-clamp-2">
                    {query.description}
                  </p>
                </div>
              </div>

              <div className="bg-gray-50 dark:bg-gray-900/50 rounded-lg p-3 mb-4 border border-gray-200 dark:border-gray-700">
                <code className="text-xs text-gray-800 dark:text-gray-200 font-mono line-clamp-2">
                  {query.query}
                </code>
              </div>

              <div className="flex gap-2">
                <button
                  onClick={() => useQuery(query.query)}
                  className="flex-1 flex items-center justify-center gap-2 text-white text-sm font-medium py-2.5 px-4 rounded-lg transition-all duration-200 shadow-sm hover:shadow-md active:scale-95"
                  style={{ backgroundColor: '#08834d' }}
                  onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#06a35a'}
                  onMouseLeave={(e) => e.currentTarget.style.backgroundColor = '#08834d'}
                >
                  <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 5l7 7m0 0l-7 7m7-7H3" />
                  </svg>
                  Use Query
                </button>
                <button
                  onClick={() => copyToClipboard(query.query, query.id)}
                  className="p-2.5 text-gray-500 dark:text-gray-400 hover:text-green-600 dark:hover:text-green-400 hover:bg-green-50 dark:hover:bg-green-900/20 rounded-lg transition-all duration-200 border border-gray-200 dark:border-gray-700 hover:border-green-300 dark:hover:border-green-600"
                  title="Copy to clipboard"
                >
                  {copiedId === query.id ? (
                    <svg className="w-4 h-4 text-green-600 dark:text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                  ) : (
                    <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                    </svg>
                  )}
                </button>
              </div>
            </div>
          ))}
        </div>

        {filteredQueries.length === 0 && (
          <div className="text-center py-16">
            <div className="w-20 h-20 bg-gray-100 dark:bg-gray-800 rounded-2xl flex items-center justify-center mx-auto mb-4 border border-gray-200 dark:border-gray-700">
              <svg className="w-10 h-10 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.172 16.172a4 4 0 015.656 0M9 12h.01M15 12h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
              No queries found
            </h3>
            <p className="text-gray-600 dark:text-gray-400 mb-4">
              No queries match the selected category.
            </p>
            <button
              onClick={() => setSelectedCategory('all')}
              className="inline-flex items-center gap-2 px-4 py-2 rounded-lg font-medium text-white transition-colors"
              style={{ backgroundColor: '#08834d' }}
            >
              <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
              </svg>
              View all categories
            </button>
          </div>
        )}
      </main>
    </div>
  );
}